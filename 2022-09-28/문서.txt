2022-09-28
우리가 하는일
객체에 “어떤 문자열들을 담는다”
기계가 하는일
인간이 만든 문자열을 어떤 방식으로 ‘활용’ -> “html로 해석할래” -> 응답헤더 response header -> 200, 404 “코드” -> ‘상태를 점검하는 과정’, 서버가 열렸는지 닫혔는지 점검하는 ‘코드형식’을 응답헤더라고 부른다
localhost:포트 / listener(“나 듣고있어”, “설정된 입구를 통해서”
-> 내가 내 집에 주소를 찾아 방문하는 격
client의 요청이 곧 이벤트처리로 판단해도 좋다
‘비동기 함수’는 기다리지 않게 해주는 강력한 기능 -> 사용자가 기다리는 것이 좋은 영향을 주지않기 때문에
-> 필요에 따라서는 반드시 순서를 지켜야할 필요가 있다.
-> 병렬처리 : 병렬 건전지에 비유
-> 직렬처리 : 순서를 지키면서 진행
생성자 함수 -> 인스턴스
promise(약속) -> 실행방식을 개발자한테 맡긴다
Fending이라는 개념을 같이 가져갈 것
promise 인스턴스는 매개변수로 ‘함수를 받는다’
-> 두개의 매개변수를 또 받는다
->resolve, reject -> 모두 함수다
-> 데이터를 ‘인자로 전달 받았다’





===================================================================
개인정리
콜백함수
- 정의 : 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 한다
- 필요이유 : 자바스크립트가 비동기 프로그래밍을 위한, 이벤트를 처리하기 위해 만들어진 언어이기 때문에 한개의 명령에 대한 응답을 기다리는 것 보다 다음 명령을 수행하기 위한 콜백 함수를 사용하는 것이 낫기 때문
- 콜백 지옥 : 비동기 프로그래밍시 발생하는 문제, 함수의 매개변수로 넘겨지는 콜백 함수가 반복되어 코드의 들여쓰기 수준이 감당하기 힘들정도로 깊어지는 현상. 이를 해결하기 위해 Promise객체가 등장했다
Promise
- Promise객체를 사용하면 then()을 이용해 기존의 중첩되는 구조를 피하고 몇가지가 추가되어도 Promise객체를 사용한다면 코드의 수가 추가될 뿐 중첩이 되지 않기때문에 보다 쉽게 이해할수 있는 코드를 만들수 있다.

back vs client
client CSR = React x Native

get, post, input, form, xml 점검 필요, ajax 점검

express를 사용하려면 왜 사용하는지에 대한 공부가 필요하다
======================================================================
GET : 서버로 부터 정보를 조회하기 위해 설계된 메소드, 요청을 전송할 때 필요한 데이터를 Body에 담지 않고 쿼리스트링을 통해 전송, 요청 파라미터가 여러개면 &로 연결

POST :  리소스를 생성 혹은 변경하기 위해 설계, GET과는 달리 전송할 데이터를 HTTP 메시지 Body에 담아 전송 HTTP메시지의 Body는 길이의 제한이 없이 데이터 전송이 가능 따라서 POST는 대용량 데이터 전송이 가능, 요청을 보낼때 요청 헤더의 Content-Type에 요청 데이터의 타입을 표시해야한다.

두개의 차이 : GET은 동일한 연산을 여러 번 수행해도 동일한 결과값이 도출되어야한다 따라서 설계원칙에 따라 서버의 데이터나 상태를 변경시키면 안되고 주로 조회를 할때 사용해야한다.
ex) 브라우저의 웹페이지를 열거나 게시글을 읽는 등의 조회
POST는 서버에 동일한 요청을 여러 번 전송해도 응답은 항상 다를 수 있다. 따라서 서버의 상태나 데이터를 변경시킬 때 사용된다. Post는 생성 수정 삭제에 두루두루 사용이 가능하다
======================================================================
※쿼리스트링 : url주소에 미리 합의된 데이터를 파라미터를 통해 넘기는 것
ex) http://host:port/path?querystring / ?의 뒤에 url를 붙인다


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
input : 웹 기반 양식에서 사용자의 데이터를 받을 수 있는 대화형 컨트롤, 사용자에 따라서 다양한 종류의 입력 데이터 유형과 컨트롤 위젯이 존재

form : 정보를 제출하기 위한 대화형 컨트롤을 포함하는 문서 구획을 나타냄
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
AJAX : HTML 또는 XHTML, CSS, JavaScript, DOM, XML, XSLT 마지막으로  XMLHttpRequest 객체등의 기존의 여러 기술을 사용하는 새로운 접근법을 설명하는 용어
